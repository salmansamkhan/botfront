type Query {
    conversationsPage(
        projectId: String!
        page: Int
        pageSize: Int
        status: [String]
        sort: order #in the future if needed to sort on multiple fields passing and array of orders, and modifying the datasource(mongo/conversation.js) accordingly might to the trick
    ): Pagination
    conversation(projectId: String!, id: String!): ConversationContainer!
}

enum order {
    updatedAt_ASC
    updatedAt_DESC
}

type Mutation {
    markAsRead(id: String!): updateResponse!
    updateStatus(id: String!, status: String): updateResponse!
    delete(id: String!): updateResponse!
}

type updateResponse {
    success: Boolean!
}

type Pagination {
    conversations: [ConversationContainer!]!
    pages: Int
}

type ConversationContainer {
    tracker: Any
    userId: String
    projectId: String
    status: String
    _id: String
    updatedAt: String
    createdAt: String
    env: String
    language: String
}

type Entity {
    entity: String,
    value: String,
    start: Int,
    end: Int,
    confidence: Float,
    extractor: String,
    processors: [String],
}

input EntityInput {
    entity: String,
    value: String,
    start: Int,
    end: Int,
    confidence: Float,
    extractor: String,
    processors: [String],
}

type Intent {
    confidence: Float
    name: String
}

input IntentInput {
    confidence: Float,
    name: String,
}
